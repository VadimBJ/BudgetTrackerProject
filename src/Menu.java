import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.List;
import java.util.Map;


public class Menu implements Finals {

    public static void menuLogin(List<Transaction> transactionList,
                                 List<Currency> currencyList, Map<String, String> userData) throws IOException, InterruptedException {
        boolean isLogin = false;
        do {
            System.out.print("""
                      
                      ùüô. –í–æ–π—Ç–∏ –ø–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é
                      ùüö. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é:\u202F""");
            int choice = Input.readIntLimited(1, 2);
            switch (choice) {
                case 1 -> {
                    isLogin = Input.userLoginRead(userData);
                    if (isLogin) {
                        Input.readFromEncryptFile(transactionList, currencyList);
                    }
                }
                case 2 -> {
                    isLogin = Input.userNewRead(userData);
                    if (isLogin) {
                        Input.initializeData(currencyList);
                    }
                }
            }
        } while (!isLogin);
    }

    public static void menuMain(List<Transaction> transactionList,
                                List<Currency> currencyList) throws IOException, AWTException, InterruptedException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            Output.clearScreen();
            System.out.println(LOGO2);
            System.out.println();
            System.out.println(BLUE + "[ –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ ]" + RESET);
            System.out.println("""
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                      ùüô. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                      ùüö. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º
                      ùüõ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ 10
                      ùüú. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
                      ùüù. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
                      ùüû. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                      ùüü. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
                      ùü†. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–≤–∞–ª—é—Ç—ã
                      ùü°. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                      
                      ùüò. –í—ã—Ö–æ–¥
                    """);
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
            int choice = Input.readIntLimited(0, 9);
            switch (choice) {
                case 1 -> Input.addTransaction(br, transactionList, currencyList);
                case 2 -> Output.printTransactionAll(br, transactionList, currencyList);
                case 3 -> Output.printTransactionBy10(transactionList, currencyList);
                case 4 -> menuPrintTransactionByDate(br, transactionList, currencyList);
                case 5 -> menuFilterTransaction(br, transactionList, currencyList);

                //todo –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é / –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥ / –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–ø—Å—É–º–º—É –≤ –≤–∞–ª—é—Ç—ã

                case 6 -> Input.addCategory(br);
                case 7 -> Input.addCurrency(br, currencyList);
                case 8 -> menuEditCategoryCurrency(br, currencyList);
                case 9 -> Output.writeToEncryptFile(transactionList, currencyList);
                case 0 -> System.exit(0); //todo –º–µ–Ω—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
                default -> System.out.println();
            }
        }
    }

    public static void menuFilterTransaction(BufferedReader br, List<Transaction> transactionList,
                                             List<Currency> currencyList) throws IOException, InterruptedException, AWTException {
        System.out.println();
        System.out.println(BLUE + "[ –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–ê ]" + RESET);
        System.out.println("""
                –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –æ—Ç–±–æ—Ä–∞ –∑–∞–ø–∏—Å–µ–π:
                  ùüô. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
                  ùüö. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
                  ùüõ. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –≤–∞–ª—é—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                  ùüú. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
        int choice = Input.readIntLimited(1, 4);
        switch (choice) {
            case 1 -> Output.printTransactionFilteredByType(br, transactionList, currencyList);
            case 2 -> System.out.println();
            case 3 -> System.out.println(); //todo
            case 4 -> System.out.println();
        }

    }

    public static void menuEditCategoryCurrency(BufferedReader br, List<Currency> currencyList) throws IOException {
        System.out.println();
        System.out.println(BLUE + "[ –í–´–ë–û–† –û–ë–™–ï–ö–¢–ê –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ]" + RESET);
        System.out.println("""
                –ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:
                  ùüô. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                  ùüö. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É
                  ùüõ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
        int choice = Input.readIntLimited(1, 3);
        switch (choice) {
            case 1 -> Input.editCategory(br);
            case 2 -> Input.editCurrency(br, currencyList);
            default -> System.out.println();
        }
    }

    public static void menuPrintTransactionByDate(BufferedReader br, List<Transaction> transactionList,
                                                  List<Currency> currencyList) throws IOException, InterruptedException, AWTException {
        System.out.println();
        System.out.println(BLUE + "[ –í–´–ë–û–† –ü–ï–†–ò–û–î–ê –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ]" + RESET);
        System.out.println();
        Date firstDate;
        Date lastDate;
        do {
            do {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¥–¥.–ú–ú.–≥–≥–≥–≥]: ");
                firstDate = Input.dateFromString(br.readLine() + "  00:00");
            } while (firstDate == null);
            do {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¥–¥.–ú–ú.–≥–≥–≥–≥]: ");
                lastDate = Input.dateFromString(br.readLine() + "  23:59");
            } while (lastDate == null);
            if (firstDate.after(lastDate)) {
                System.out.println(RED + "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!" + RESET);
            }
        } while (firstDate.after(lastDate));
        Output.printTransactionByDate(br, transactionList, currencyList, firstDate, lastDate);
    }

    public static void menuAnderTransactionList(BufferedReader br, List<Transaction> transactionList,
                                                List<Currency> currencyList, boolean isList10) throws IOException, InterruptedException, AWTException {
        System.out.println("""
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                  ùüô. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –ø–æ Id
                  ùüö. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ Id
                  ùüõ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                  ùüú. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–Ω–∏—Ü""");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
        int choice = Input.readIntLimited(1, 4);
        switch (choice) {
            case 1 -> {
                System.out.print(BLUE + "–í–≤–µ–¥–∏—Ç–µ Id –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏: " + RESET);
                Output.showTransactionById(br, transactionList, currencyList, Input.readIntLimited(1, transactionList.size()), isList10);
            }
            case 2 -> {
                System.out.print(BLUE + "–í–≤–µ–¥–∏—Ç–µ Id –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏: " + RESET);
                Input.deleteTransaction(transactionList, transactionList.size() - Input.readIntLimited(1, transactionList.size()));
            }
            case 3 -> Menu.menuMain(transactionList, currencyList);
            case 4 -> System.out.println(" ");

        }
    }

    public static void menuAfterTransactionListEnds(BufferedReader br, List<Transaction> transactionList,
                                                    List<Currency> currencyList, boolean isList10) throws IOException, InterruptedException, AWTException {
        System.out.println("""
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                  ùüô. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –ø–æ Id
                  ùüö. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ Id
                  ùüõ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
        int choice = Input.readIntLimited(1, 3);
        switch (choice) {
            case 1 -> {
                System.out.print(BLUE + "–í–≤–µ–¥–∏—Ç–µ Id –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏: " + RESET);
                Output.showTransactionById(br, transactionList, currencyList, Input.readIntLimited(1, transactionList.size()), isList10);
            }
            case 2 -> {
                System.out.print(BLUE + "–í–≤–µ–¥–∏—Ç–µ Id –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏: " + RESET);
                Input.deleteTransaction(transactionList, transactionList.size() - Input.readIntLimited(1, transactionList.size()));
            }
            case 3 -> Menu.menuMain(transactionList, currencyList);
        }
    }

    public static void menuAnderTransactionView(BufferedReader br, List<Transaction> transactionList,
                                                List<Currency> currencyList, int index, boolean isList10) throws IOException, InterruptedException, AWTException {
        System.out.println("""
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                  ùüô. –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                  ùüö. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                  ùüõ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""");
        int choice;
        if (isList10) {
            System.out.println("  ùüú. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–Ω–∏—Ü");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
            choice = Input.readIntLimited(1, 4);
        } else {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
            choice = Input.readIntLimited(1, 3);
        }
        switch (choice) {
            case 1 -> Input.deleteTransaction(transactionList, index);
            case 2 -> Input.editTransaction(br, transactionList, currencyList, index);
            case 3 -> Menu.menuMain(transactionList, currencyList);
            case 4 -> System.out.print(" ");
        }
    }

}
